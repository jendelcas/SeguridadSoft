# Messages changed between 8.9.0.0 to 9.0.0.0
#-------------------------------------------------------------

help.coupons   = A Coupon may be associated with a promotion so that the promotion only becomes active when a customer enters a valid coupon code during the checkout process. Coupons may be created, edited and deleted. Each coupon has a <b>Name</b> and <b>Description</b> which may be used to identify it. The <b>Coupon Code</b> is the code that a customer will enter during checkout in order to activate the coupon. Clicking the <b>Get</b> button populates the Coupon Code with a generated value. The code is generated in the getCouponCode() method of the AdminOrderIntegrationMgr where the algorithm for code generation may be customized. The number of times that a coupon can be used, may be limited by setting the <b>Max Usage</b> attribute. A value of -1 is equivalent to unlimited use and is the default. <br /><br />If the Warn of Duplicate Coupons configuration variable is set to true in the <b>Configuration >> Admin App Configuration</b> section of the Admin App, then a warning appears when the system detects that the coupon code entered already exists.<br /><br />Each coupon may be associated to zero or more promotions, These associations are managed by clicking on the <b>Promotions</b> button at the bottom of the window. As promotions are added or removed from the coupon, the button label updates to show the current number of promotions. <br /><br />Remember that in order to be able to enter a promotion code during the checkout process, you must select <b>Configuration >> My Store</b> from the Admin App and set the <b>Display Coupon Entry Field</b> configuration variable.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Coupons per page</li></ul>
help.customerTags = This panel is used to create, edit and delete customer tags. A customer tag can be associated with a customer and given a value for that customer. The tags are used for marketing purposes, to show dynamic content, to determine whether to activate a promotion and to filter the recipients of customer mailings. Expressions can be created using the tags, that can be evaluated in real time to display dynamic content. i.e. Show a banner or activate a promotion only to customers over 50 years old that have viewed products in a particular category. Tags may also be used in a B2B scenario to hold information about a customer such as whether the customer has an order limit or whether the customer can view orders of other customers that have been defined in the customer hierarchy tree. <br/><br/> The <b>tag type</b> can take the following values:<ul><li>STRING_TYPE - The tag value is in the format of a String. i.e. To store the country from which the store is being accessed.</li><li>INT_TYPE - The tag type is in the format of an int. i.e. To save the product id of  the last product viewed by the customer. </li><li>MULTI_INT_TYPE - The tag type allows the tag to store an array of ints. When this type is selected, the <b>Max Number of Ints</b> attribute determines the maximum number of ints in the array. i.e. To store the ids of the last 5 products viewed by the customer.</li><li>DECIMAL_TYPE - The tag type is in the format of a decimal. i.e. To store the value of all items in the basket.</li><li>DATE_TYPE - The tag type is in the format of a date. In an expression it can be used to compare the stored date with another chosen date.</li><li>BOOLEAN_TYPE - The tag type is in the format of a boolean. i.e. To store the customer gender. The tag could be named IS_MALE and take values of true or false.</li><li>AGE_TYPE - The tag type is used to store dates. Unlike the DATE_TYPE which can compare dates, this tag is used when in an expression you want to act on the  elapsed time (or age) of an event. i.e. To store the date of the last login for the customer so you can take action if a customer hasn't logged in for two weeks. Alternatively you could store the age of a customer to offer promotions to certain age brackets.</li></ul>The <b>name</b> of the tag is important because it will be used to identify the tag when being set for a customer. The <b>description</b> of the tag is used in the expression builder when building an expression using the tag. i.e. A tag may be named LAST_PRODUCT_VIEWED and have a description, "last product viewed".<br/><br/>The <b>validation</b> attribute is optional and may contain regular expression to validate values entered in the expression builder. i.e. For a boolean tag it should be set to true|false.<br/><br/>The <b>weighting</b> attribute is optional but can be used in the calculation of suggested products if the external AI engine is not available.<br/><br/>The <b>Set by API</b> check box allows you to determine whether the customer tag value can be set using the application API (e.g. KKEngIf). It should be set for tags that capture customer behaviour such as CART_TOTAL but shouldn't be set for any of the B2B tags which grant permissions for customers. The default value during an insert is false. It can be set to true in konakartadmin_gwt.properties using the property fbc.kk_panel_customer_tags.set_by_api.<br/><br/>The custom fields can be used to store custom data for the tag. The labels for the custom fields can be changed in the message catalog.help.customPanel1               = Help text for custom panel 1. Substitute this with your own text in the file AdminHelpMessages.properties.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Customer Tags per page</li></ul>
help.catalogs  = The Business and Enterprise Editions of KonaKart allow you to define multiple catalogs for a single store. Each catalog contains the same products, but they may have different prices and quantity in stock. There are separate database tables that store the prices and quantities for each catalog.<br/><br/>This panel allows you to define a new catalog. The catalog key is used as one of the keys in the tables that store prices and quantities. It should not contain spaces. The description is only used in this panel to describe the catalog in case you decide to make the key non descriptive. The checkboxes allow you to choose whether the catalog should store prices, quantities or both. If the catalog doesn't store prices or quantities, then the values used are those stored with the product. The admin and application API calls allow you to specify the catalog to use when fetching one or more products. The admin API calls also allow you to specify the catalog used when inserting and editing a product. <br/><br/>When a catalog is defined, a drop list appears on the header panel that allows you to choose the catalog. Note that if you create a new product catalog, select it from the drop list and then do a product search in the products panel, no products will be found. If a catalog is defined for example to store prices, then a product for that catalog will not be found if the prices have not been set. In order to set them, you must edit the product after having selected <b>No Catalog</b> from the drop list. Before saving the edited product you must select your chosen catalog and then click the save button. In this way the new prices will be saved for that catalog and the product will now appear after a search.<br/><br/><b>Catalog Type</b> can be "Current" or "Future". Current catalogs are active in the system but Future catalogs are not. Instead Future catalogs are used to set prices in the <b>Destination catalog</b> on the <b>Active Date</b><br/><br/><b>Destination Catalog</b> is the name of the catalog that will be updated on the <b>Active Date</b>.<br/><br/><b>Prices Last Created</b> displays the date and time when the catalog prices were last generated by KonaKart based on category rules.
help.customers = You may search for a customer by entering the last name in the Search Panel and then clicking the Search button. By default the search is not case sensitive if you are using MySQL or MS-SQLServer and case sensitive if you are using PostgreSQL, Oracle or DB2. You can configure your database to be non-case sensitive (refer to the User Guide for details on how to modify the case-sensitivity).  Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that all <b>Smiths</b> will be returned if you enter <b>mith</b> as the Last Name. In a similar fashion you can search for a customer based on certain fields of his address (street, city and postcode). <br /><br />You may also search for all customers belonging to a customer group, for administrator users and for users that have been enabled or disabled. An administrator can define default values for the customer group and customer type droplists (see <b>Configuration >> Admin App Configuration</b>), and also whether these droplists are visible for a certain user using role-based security.  In KonaKart, an administrator can also log into the application with the same credentials and so can be considered to be a user and a customer.<br /><br />The Address field may be customized through a template, and even disabled completely. The template can be found under <b>Configuration >> Admin App Configuration</b> and valid template fields are:<ul><li>$cr - Carriage return (new line)</li><li>$firstname</li><li>$lastname</li><li>$company</li><li>$streets = $street + line break + $suburb</li><li>$street</li><li>$suburb</li><li>$city</li><li>$postcode</li><li>$state</li><li>$telephone</li><li>$telephone1</li><li>$email</li><li>$country</li></ul>To disable the address field you must leave the template empty.<br /><br />Any displayed customers may be edited or deleted by clicking the respective buttons at the bottom of the list.<br /><br />Click the <b>Orders</b> button to view any orders that the customer may have submitted.<br /><br />Click the <b>Email</b> button to send an email to the customer.<br /><br />Click the <b>Login</b> button to log in to the KonaKart eCommerce application as the selected customer, in a new browser window. The base url and the features of the new window can be configured under <b>Configuration >> Admin App Configuration</b>. The user must have edit privileges for the Customers panel in order for this button to be visible.<br /><br />Click the <b>Set Password</b> button (if present) to set a customer's password to a specified value.<br /><br />Click the <b>Reset Password</b> button to reset a customer's password - an email will be sent to the customer containing the new password.<br /><br />Click the <b>Subscriptions</b> button to go to a panel showing any recurring billing subscriptions that may be associated with the selected customer. If your store doesn't support recurring billing, then this button may be removed in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br />When in multi-store single database, non-shared customer mode (and the logged in administrator is a super user) you will see a <b>Clone</b> and a <b>Del Multi Store</b> button which are used to manage users across multiple stores. After clicking one of these buttons, you can choose the destination stores for cloning or deleting. By default all stores are displayed, regardless of their state. In konakartadmin_gwt.properties you can set properties to hide stores when they are disabled, under maintenance or deleted. The clone operation clones the currently selected customer in the destination stores and the multi store delete, deletes any customer with a matching eMail address from the destination stores. These buttons may be hidden by configuring the role privileges of the Customers2 panel.<br /><br /><b>File based configuration</b> can be used to define the number of customers shown in each group returned from the database and to set case-insensitive searching for case-sensitive databases.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Customers per page</li></ul>
