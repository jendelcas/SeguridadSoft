# Messages changed between 8.3.0.0 to 8.5.0.0
#-------------------------------------------------------------

help.cacheConfig            = <b>Caching</b><br /><br />KonaKart is configured using the configuration variables present within this section of the Administration Application. The variables are stored within the <b>configuration</b> database table and may be edited from this panel.<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded, and this happens on a scheduled basis at the frequency defined by the <b>Client config cache refresh check interval</b> configuration variable that can be edited on this panel.<br /><br />The <b>Admin caches refresh check interval</b> works in a similar way for the Admin caches.<br /><br />Do not tick the checkbox on the right of each configuration parameter if you do not want it to be returned by the storefront APIs.  If you do not need a configuration variable to be returned by the storefront APIs uncheck the field to improve performance and security.<br /><br />In the Enterprise version of KonaKart you can choose to <b>enable or disable the caching</b> of Products and/or Product Image names.<br /><br />You can set a maximum size for the KonaKart Product Cache (maximum number of products) - ensure you allocate enough memory to java.<br /><br />Cache Management (flushing etc) is controlled by KonaKart Events - you can choose whether or not to create some of these events.  If you choose to create an event (eg Quantity Change Events) this will cause the relevant product to be removed from the cache so that its Quantity is updated next time it is read.<br /><br />See the User Guide for more details on how to configure caching in KonaKart.<br /><br />Most variables have float over text with a short description of their functionality.
help.editProductsDescription = A product name and description must be entered for each language. The product URL, the Product Comparison Data and various Custom Fields (if displayed) are not compulsory.<br /><br />The <b>Product Comparison Data</b> is structured data that can be used on the UI to compare this product with a similar product. For example, it could be XML where each tag represents a feature of the product. <br /><br />The <b>Custom Fields</b> can be used for any purpose and the labels can be changed to reflect what the fields should contain.  The custom field lengths can be modified in the database if required (by default they are set to be very short fields to optimise performance when these are not required).  Their display on this panel can be enabled using File-Based Configuration and their validation defined using Custom Validation.<br /><br />The <b>Viewed Count</b> shows how many times a product has been viewed in a particular language. In the standard KonaKart storefront application, the default order by when viewing products is by Most Viewed. An administrator may set the Viewed Count in order to promote a product so that it is displayed before the others. Note that after a default installation, the storefront application is configured to not update the product viewed count every time a product is viewed, for performance considerations.<br /><br /><b>Note:</b> The Insert or Save button will not be enabled until valid data has been entered in all compulsory fields (outlined in red) in <b>all tabs</b>. If you are wondering why the Insert or Save button isn't enabled, you should cycle through all of the tabs outlined in red and look for entry fields outlined in red.
help.editProductsQuantities = This screen is used to manage the stock information of a product. The information presented on the panel is different depending on whether the product has been assigned attributes. For example if you have a shirt that comes in various colors and sizes, you will probably want to know how many you have in stock for the various color / size combinations. If the product has no attributes, then the only fields visible are the ones that allow you to input stock data for a single SKU. Otherwise you are presented with an array that allows you to enter stock data for multiple SKUs.<br /><br />When inserting a product the multiple SKU array will never be present until the product has been saved since it can only display data based on product attributes that already exist. You must save the product, click the <b>Back</b> button and then edit the product in order to insert SKU / quantity / date available data.<br /><br />If the Warn of Duplicate SKUs configuration variable is set to true in the <b>Configuration >> Admin App Configuration</b> section of the Admin App, then a warning appears when the system detects that the SKU entered already exists.<br /><br />The <b>Quantity</b> field for a bundle product is read-only. It is calculated by considering the quantities of all components of the bundle and the lowest quantity is returned. If the quantity of a product within the bundle is greater than 1 then this information is also used within the formula.<br /><br />The <b>Stock Reorder Level</b> defaults to -1 which means that the global value defined by the STOCK_REORDER_LEVEL configuration variable is used. If set to a positive number, then this value will override the global value.<br /><br /><b>Can order when not in stock</b> defaults to the global value defined by the STOCK_ALLOW_CHECKOUT configuration variable. The default value can be overridden on a product by product basis, by setting it to yes or no.<br /><br /><b>Ignore Qty for Variations</b> is used by KonaKart when the product has been assigned attributes and you may assign an SKU and quantity for each variation (e.g. small, medium, large). When checked, the individual quantities are not used and the stock level is taken from the single quantity attribute assigned to the product.<br /><br /><b>Ignore Qty when Editing</b> when set
help.prodAttrs              = Custom attributes are attributes which you may define and then add to a template which in turn may be added to a product. This panel allows you to create new and manage existing attributes. Each custom attribute definition has the following attributes:<ul><li><b>Name:</b> The name of the custom attribute which is a compulsory field. i.e. ScreenSize or MegaPixels etc.</li><li><b>Type:</b> You may choose types from a drop list. This information may be used by the storefront application when displaying the attribute value. i.e. If it knows the type of attribute it may decide what template to use in order to display it.</li><li><b>Facet:</b> If the custom attribute is used for faceted search, it must be mapped to one of the SOLR facet fields.</li><li><b>Set Function:</b> This is used by the admin app when creating a UI widget for the custom attribute. Valid Set Functions are:<ul><li>integer(min,max) where min and max may be numbers or set to null. i.e. integer(10,null) checks that the integer has a minimum value of 10 or above. Integer(null,null) just checks that the value entered is an integer without doing any range checking.</li><li>double(min,max) using the same logic as explained above for decimal numbers.</li><li>string(min,max) using the same logic as explained above for the length of the string.</li><li>choice('true','false') creates a radio button panel with the options of true and false.</li><li>choice('msg.small','msg.medium','msg.large') creates 3 radio buttons where the labels are looked up in a message catalog. In this case, the text displayed is looked up from the message catalog, whereas the values saved are always msg.small, msg.medium and msg.large regardless of the language.</li><li>choice('S'='msg.small','L'='msg.large') creates 2 radio buttons where the labels are looked up in a message catalog. In this case, the text displayed is looked up from the message catalog, whereas the values saved are always S or L regardless of the language.</li><li>option(0=date.day.long.Sunday,1=date.day.long.Monday,2=date.day.long.Tuesday) creates a drop list for the first 3 days of the week. The text of the days displayed is retrieved from the message catalog whereas the saved data is 0 for Sunday, 1 for Monday etc. </li><li>RichText(x) where x defines the vertical size (in elements) of the Rich Text data entry widget. (e.g. RichText(10) for a size of 10em)</li></ul></li><li><b>Template:</b> The template contains a string that may be used by the storefront application to display the value. i.e. In the case of a date, the storefront application could detect that it is a date from the <b>type</b> and then use the template to display the date correctly. </li><li><b>Msg Cat Key:</b> This is used by the storefront and admin applications to look up the label from the message catalog. If not present, the <b>name</b> may be used.</li><li><b>Validation:</b> This may contain regular expression such as true|false or [0-9]* which will be used by the admin app to validate the attribute.</li><li><b>Custom Fields:</b> The custom fields may contain any metadata for the attribute which can be used by the storefront application. i.e. A custom field may contain data useful for grouping custom attributes.</li></ul>When custom attributes are converted to an XML string and saved within the product object, some metadata fields of the custom attribute are saved along with the value of the attribute itself. These metadata fields (i.e. Message catalog key, the template for displaying the attribute and the custom fields) are stored in the XML for performance reasons. When a Product Attribute Descriptor is modified or deleted, all of the products using the descriptor are not updated automatically. A dialog box appears where you can choose whether to update the products. If the “Yes” button is clicked, then the code loops through all products using the Product Attribute Descriptor and updates the XML. If there are many products, this process may take a while.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Custom Attributes per page</li></ul>
help.promotions             = A promotion is an offer that a merchant may apply to any number of his products. Promotions may be searched for
