# Messages changed between 8.8.1.0 to 8.9.0.0
#-------------------------------------------------------------

help.orders                     = This panel can be configured to display the Order Id or the Order Number in the left most column. The Order Id is generated by KonaKart automatically and is a unique ascending integer. The Order Number may be generated by custom business logic just before an order is saved and so may adhere to company standards etc. The Order Number may contain both letters and numbers. The panel can be configured in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br />You may search for orders using a combination of various filters:<br /><ul><li>Orders from a customer using the customer's id</li><li>Orders based on their Order Id or Order Number</li><li>Orders in a certain state</li><li>Orders from a customer using the customer's name</li><li>Orders from a customer using the customer's email address</li><li>Orders from a customer using the customer's postcode</li></ul>Once the search criteria have been set, you must click the search button.<br /><br />Any displayed orders may be edited or deleted by clicking the respective buttons at the bottom of the list.<br /><br />Click the <b>Invoice</b> button to view, print and send the invoice. The template used for the displayed (and PDF) invoice is called OrderInvoice. The template used for the email that sends the invoice is OrderInvoiceAttachment. In konakartadmin_gwt.properties you can set fbc.kk_display_panel.invoice.send_attachment to false so that the invoice is not sent as a PDF attachment. Default behaviour is to send it as an attachment of the email.<br /><br />Click the <b>Packing Slip</b> button to view and print the packing slip.<br /><br />Click the <b>Payment Info</b> button to view any payment gateway information that may be associated with the order.<br /><br />Click the <b>Returns</b> button to view / edit / insert any information regarding products that have been returned.<br /><br />Click the <b>Refunds</b> button to view / edit / insert any information regarding refunds and to perform real time refunds through the payment gateway. This button may be hidden by setting the fbc.kk_panel_orders.hide_refunds parameter in konakartadmin_gwt.properties.<br /><br />Click the <b>Export Order</b> button to export the order as an XML file (Business or Enterprise Editions Only). The root directory for file creation is set by the configuration variable in the <b>Configuration >> Shipping / Packing</b> section of the Admin App.<br /><br />Click the <b>Export Order For Shipping</b> button to export the order for shipping. This option uses code in the Shipping Modules to export the order in a format appropriate for a 3rd Party Shipping Application - such as for UPS WorldShip. The root directory for file creation is set by the configuration variable in the <b>Configuration >> Shipping / Packing</b> section of the Admin App.<br /><br />Click the <b>Customer</b> button to go to a panel showing information about the customer that submitted the order. From this panel you can send an eMail to the customer, log in to the application as the customer etc.<br /><br />Click the <b>Subscriptions</b> button to go to a panel showing any recurring billing subscriptions that may be associated with the selected order. If your store doesn't support recurring billing, then this button may be removed in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br /><b>File based configuration</b> can be used to define the number of orders shown in each group returned from the database.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Orders per page</li></ul>
help.license                    = <b>KonaKart Licensing</b><br /><br />You need a valid license to run the Business or Enterprise Editions of KonaKart.<br /><br />To obtain a license key, contact <a href="mailto:sales@konakart.com?Subject=KonaKart%20 License%20Key%20Request">sales@konakart.com</a>.<br /><br />Enter the <b>License Owner</b> and <b>License Key</b> values that you obtained from KonaKart then click on <b>Save</b>.
help.kk_panel_customA           = <b>Insert Product Wizard</b><br /><br />This is an exmaple of the kind of functionality that can be added in Custom Panels of the Administration Application.<br /><br />This example is a user-friendly wizard that allows a user to insert a simple product.<br /><br />The application (including full source code) is available to Business and Enterprise customers so that it can be used as a starting point for developing custom admin functionality.
help.erpConfig                  = <b>ERP Integration Configuration</b><br /><br />These are the configuration parameters for the ERP XML Integration features for your store.<br /><br />These are only used in the Business and Enterprise Editions of KonaKart.<br /><br />In a multi-store configuration you will need to set these variables for each store.<br /><br /><b>ERP Integration Enabled?</b> allows you to enable or disable ERP functionality.  If disabled for the default store (the one defined in the Incoming Message Processor servlet) the ERP input queue will not be read by KonaKart and incoming messages will not be processed.<br /><br /><b>Msg Log Directory Good</b> is for defining a directory where successfully-processed messages will be stored.<br /><br /><b>Msg Log Directory Failed</b> is for defining a directory where unsuccessfully-processed messages will be stored.<br /><br /><b>Email Address for Failed messages</b> is for defining the email addres of a KonaKart user who will receive an email whenever a message is not processed successfully.<br /><br /><b>Template for failed msg email</b> is for defining the name of the template that will be used when sending email messages about unsuccessful messages.<br /><br /><b>ERP Invoice Path</b> is for defining the name of the directory to use for invoices if the exportInvoice message from the ERP system does not contain an invoicePath attribute.<br /><br />${help.returnByApi}
help.stores                     = <b>Store Maintenance</b><br /><br />If you have been granted sufficient privileges, you may search for a store in the mall by entering any combination of the search criteria at the top of the panel then clicking the Search button.<br /><br />The search is not case sensitive unless your database is configured to be non-case sensitive.  Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that, for example, storeId <b>StoreX</b> will be returned if you enter <b>tor</b> as the StoreId.<br /><br />In a similar fashion you can search for a store in the mall on whether or not it is enabled or disabled, under maintenance or not under maintenance and whether or not it is marked as deleted.<br /><br />Only the stores you are authorized to maintain will be returned.<br /><br />Any displayed stores may be edited or deleted by clicking the respective buttons at the bottom of the list assuming the relevant privileges have been granted to the current user.<br /><br />The user must have edit store privileges for the Edit Store panel in order for the Edit button to be visible.<br /><br />To create a new store click the <b>New</b> button whereupon a new panel will be displayed on which you define the attributes for the new store.<br /><br />To create a new store by cloning an existing one select the store to clone then click the <b>Clone</b> button whereupon a new panel will be displayed on which you define some attributes to execute the clone and define the new storeId.  Stores created by cloning are initialised to be "Under Maintenance".<br /><br />To delete a store select the store to delete then click the <b>Delete</b> button whereupon a confirmation dialogue will be displayed.  Click on the <b>Yes</b> button to confirm.  Note that the store isn't actually deleted from the database by a delete operation, it is merely marked as deleted.  Thus, it is possible to undelete a store that has been deleted by editing the deleted store and unchecking the <b>Deleted</b> box.<br /><br />To remove a store select the store to remove then click the <b>Remove</b> button whereupon a confirmation dialogue will be displayed.  Click on the <b>Yes</b> button to confirm.  Note carefully that all the records belonging to that store will be removed permanently and this cannot be reversed.  The Remove button will only be enabled if the removeMallStore API call is enabled in the konakartadmin.properties file.<br /><br /><b>Enabled</b> = active stores that are available for use.  If disabled a store is not accessible to application or admin app users. <br /><br /><b>Under Maintenance</b> = stores that are currently being maintained so are inaccessible to application users, but can be accessed by admin app users.<br /><br /><b>Deleted</b> = stores that are deleted are no longer available for use by application or admin app users.  These stores are not physically deleted from the database but only marked as "deleted".  Therefore it is possible to "Un-delete" a store if required.<br /><br />The <b>Vendor</b> button takes you to a new panel where you can view the vendor associated with the selected store. To associate a new vendor to a store, click the <b>Vendor</b> button. If the vendor already exists you must search for the vendor using the search fields at the top of the panel. Otherwise you need to insert a new vendor. Once the vendor has been selected, you must click the <b>Add Vendor To Store</b> button which returns you to this panel.
help.customPanelsConfig         = <b>Custom Panels</b><br /><br />This section is for configuring your custom panels.<br /><br />You can set the height of the custom panel frame to suit your needs by specifying a number of pixels (e.g. 700px).<br /><br />For each of the ten panels you can specify a different URL.  When the custom panels are called some parameters are appended to define the context.<br /><br />In the Community version the sessionId is added.  In the Business and Enterprise Editions the id of the currently displayed language, the admin userId and the storeId are all added.
help.catalogs                   = The Business and Enterprise Editions of KonaKart allow you to define multiple catalogs for a single store. Each catalog contains the same products, but they may have different prices and quantity in stock. There are separate database tables that store the prices and quantities for each catalog.<br/><br/>This panel allows you to define a new catalog. The catalog key is used as one of the keys in the tables that store prices and quantities. It should not contain spaces. The description is only used in this panel to describe the catalog in case you decide to make the key non descriptive. The checkboxes allow you to choose whether the catalog should store prices, quantities or both. If the catalog doesn't store prices or quantities, then the values used are those stored with the product. The admin and application API calls allow you to specify the catalog to use when fetching one or more products. The admin API calls also allow you to specify the catalog used when inserting and editing a product. <br/><br/>When a catalog is defined, a drop list appears on the header panel that allows you to choose the catalog. Note that if you create a new product catalog, select it from the drop list and then do a product search in the products panel, no products will be found. If a catalog is defined for example to store prices, then a product for that catalog will not be found if the prices have not been set. In order to set them, you must edit the product after having selected <b>No Catalog</b> from the drop list. Before saving the edited product you must select your chosen catalog and then click the save button. In this way the new prices will be saved for that catalog and the product will now appear after a search.<br/><br/><b>Prices Last Created</b> displays the date and time when the catalog prices were last generated by KonaKart based on category rules.
help.editProductsDetails_1      = When the product is <b>disabled</b>, it is not returned by the API calls and so does not appear on your storefront.<br /><br />The product may be assigned one or more <b>custom attribute templates</b> which allow you to define an unlimited number of custom attributes for the product. After assigning a template, the custom attributes within the template appear under the Custom Tab in a sub tab called Template Attributes. The templates are only saved after clicking the save button in the edit product panel.<br /><br />The <b>product types</b> visible in the drop list may be modified by adding a comma separated list of integers representing the types to exclude. Look at the on-line help of the <b>Configuration >> Admin App Configuration</b> section of the Admin App for more details on this. If you are running the Business or Enterprise Editions of KonaKart you can exclude and order the product types using file based configuration by editing the <b>konakartadmin_gwt.properties</b> file.<br /><br /><b>Invisible products</b> are by default not returned by the KonaKart server API and therefore not shown in the shopping application (your store). This default functionality can be overridden by setting <b>showInvisible</b> in the <b>DataDescriptor</b> object used in the API calls. The Invisible products are still available for ordering via the API, so can be useful in certain circumstances. You can configure the Admin App to either show the invisible products in the Admin App (the default) or not show them (see the Configuration section). In the Solr configuration section you can configure whether invisible products are added to the suggested search list and to the suggested spelling list.<br /><br />When a product type of <b>Bundled Product</b> is selected, some extra buttons appear on the UI:<ul><li><b>Select Products</b> opens up a pop-up window to enable the selection of products to include in the bundle. When this pop-up window is closed, the selected products are not saved in the database until the save button on this window is clicked. </li>
help.customers                  = You may search for a customer by entering the last name in the Search Panel and then clicking the Search button. By default the search is not case sensitive if you are using MySQL or MS-SQLServer and case sensitive if you are using PostgreSQL, Oracle or DB2. You can configure your database to be non-case sensitive (refer to the User Guide for details on how to modify the case-sensitivity).  Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that all <b>Smiths</b> will be returned if you enter <b>mith</b> as the Last Name. In a similar fashion you can search for a customer based on certain fields of his address (street, city and postcode). <br /><br />You may also search for all customers belonging to a customer group, for administrator users and for users that have been enabled or disabled. An administrator can define default values for the customer group and customer type droplists (see <b>Configuration >> Admin App Configuration</b>), and also whether these droplists are visible for a certain user using role-based security.  In KonaKart, an administrator can also log into the application with the same credentials and so can be considered to be a user and a customer.<br /><br />The Address field may be customized through a template, and even disabled completely. The template can be found under <b>Configuration >> Admin App Configuration</b> and valid template fields are:<ul><li>$cr - Carriage return (new line)</li><li>$firstname</li><li>$lastname</li><li>$company</li><li>$streets = $street + line break + $suburb</li><li>$street</li><li>$suburb</li><li>$city</li><li>$postcode</li><li>$state</li><li>$telephone</li><li>$telephone1</li><li>$email</li><li>$country</li></ul>To disable the address field you must leave the template empty.<br /><br />Any displayed customers may be edited or deleted by clicking the respective buttons at the bottom of the list.<br /><br />Click the <b>Orders</b> button to view any orders that the customer may have submitted.<br /><br />Click the <b>Email</b> button to send an email to the customer.<br /><br />Click the <b>Login</b> button to log in to the KonaKart eCommerce application as the selected customer, in a new browser window. The base url and the features of the new window can be configured under <b>Configuration >> Admin App Configuration</b>. The user must have edit privileges for the Customers panel in order for this button to be visible.<br /><br />Click the <b>Reset Password</b> button to reset a customer's password - an email will be sent to the customer containing the new password.<br /><br />Click the <b>Subscriptions</b> button to go to a panel showing any recurring billing subscriptions that may be associated with the selected customer. If your store doesn't support recurring billing, then this button may be removed in the <b>Configuration >> Admin App Configuration</b> section of the Admin App.<br /><br />When in multi-store single database, non-shared customer mode (and the logged in administrator is a super user) you will see a <b>Clone</b> and a <b>Del Multi Store</b> button which are used to manage users across multiple stores. After clicking one of these buttons, you can choose the destination stores for cloning or deleting. By default all stores are displayed, regardless of their state. In konakartadmin_gwt.properties you can set properties to hide stores when they are disabled, under maintenance or deleted. The clone operation clones the currently selected customer in the destination stores and the multi store delete, deletes any customer with a matching eMail address from the destination stores. These buttons may be hidden by configuring the role privileges of the Customers2 panel.<br /><br /><b>File based configuration</b> can be used to define the number of customers shown in each group returned from the database and to set case-insensitive searching for case-sensitive databases.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Customers per page</li></ul>
help.editProductsImages2        = This tool allows you to upload product images to the server from the local file system.<br /><br />It has been designed to load images with names specifically-designed to be used with the default storefront application of KonaKart.  The number of images that can be associated with a product is unlimited and can be configured (the default is 8).  You can upload any number of images although at least 1 image is recommended.<br /><br />The filename chosen for the uploaded image files is generated by the system (many aspects of the names can be configured using File-Based Configuration (Business or Enterprise Editions only)).<br /><br />Both the generated image filename directory and the generated product UUID are shown at the bottom of the panel for diagnostic purposes only (they cannot be modified directly but can be used to identify the images created after they have been uploaded).<br /><br />Supported image formats: JPG, JPEG, GIF and PNG.<br /><br />Click the <b>Move Up</b> button to move the image one place higher up in the display order.
help.editProductsQuantities     = This screen is used to manage the stock information of a product. The information presented on the panel is different depending on whether the product has been assigned attributes. For example if you have a shirt that comes in various colors and sizes, you will probably want to know how many you have in stock for the various color / size combinations. If the product has no attributes, then the only fields visible are the ones that allow you to input stock data for a single SKU. Otherwise you are presented with an array that allows you to enter stock data for multiple SKUs.<br /><br />When inserting a product the multiple SKU array will never be present until the product has been saved since it can only display data based on product attributes that already exist. You must save the product, click the <b>Back</b> button and then edit the product in order to insert SKU / quantity / date available data.<br /><br />If the Warn of Duplicate SKUs configuration variable is set to true in the <b>Configuration >> Admin App Configuration</b> section of the Admin App, then a warning appears when the system detects that the SKU entered already exists.<br /><br />The <b>Quantity</b> field for a bundle product is read-only. It is calculated by considering the quantities of all components of the bundle and the lowest quantity is returned. If the quantity of a product within the bundle is greater than 1 then this information is also used within the formula.<br /><br />The <b>Stock Reorder Level</b> defaults to -1 which means that the global value defined by the STOCK_REORDER_LEVEL configuration variable is used. If set to a positive number, then this value will override the global value.<br /><br /><b>Can order when not in stock</b> defaults to the global value defined by the STOCK_ALLOW_CHECKOUT configuration variable. The default value can be overridden on a product by product basis, by setting it to yes or no.<br /><br /><b>Ignore Qty for Variations</b> is used by KonaKart when the product has been assigned attributes and you may assign an SKU and quantity for each variation (e.g. small, medium, large). When checked, the individual quantities are not used and the stock level is taken from the single quantity attribute assigned to the product.<br /><br /><b>Ignore Qty when Editing</b> when set, instructs KonaKart to not change the quantity of the product or its variants when the save button is clicked. This is useful for cases when the quantity of a product may be changing (as customers buy it) while the product is being edited and you do not want the quantity to be updated when the edit is saved because this would set the quantity to the original value that was read when the product was fetched from the DB. The default value may be controlled from konakartadmin_gwt.properties by the value of fbc.kk_panel_editProduct.qty.ignore.qty.default.<br /><br/><b>Products Ordered</b> keeps track of the number of times a product has been ordered. It is updated automatically by the KonaKart engine although here the value can be set manually.<br /><br /><b>Ignore Ordered when Editing</b> when set, instructs KonaKart to not change the number of times a product has been ordered when the save button is clicked. The default value may be controlled from konakartadmin_gwt.properties by the value of fbc.kk_panel_editProduct.ordered.ignore.ordered.default.<br /><br />Using file based configuration (Business or Enterprise Only) you can enable one or two custom fields for each line of the multiple SKU array.
help.prodAttrs                  = Custom attributes are attributes which you may define and then add to a template which in turn may be added to a product. This panel allows you to create new and manage existing attributes. Each custom attribute definition has the following attributes:<ul><li><b>Name:</b> The name of the custom attribute which is a compulsory field. i.e. ScreenSize or MegaPixels etc.</li><li><b>Type:</b> You may choose types from a drop list. This information may be used by the storefront application when displaying the attribute value. i.e. If it knows the type of attribute it may decide what template to use in order to display it.</li><li><b>Facet:</b> If the custom attribute is used for faceted search, it must be mapped to one of the SOLR facet fields.</li><li>${help.prodAttrs.SetFunctions}</li><li><b>Template:</b> The template contains a string that may be used by the storefront application to display the value. i.e. In the case of a date, the storefront application could detect that it is a date from the <b>type</b> and then use the template to display the date correctly. </li><li><b>Msg Cat Key:</b> This is used by the storefront and admin applications to look up the label from the message catalog. If not present, the <b>name</b> may be used.</li><li><b>Validation:</b> This may contain regular expression such as true|false or [0-9]* which will be used by the admin app to validate the attribute.</li><li><b>Custom Fields:</b> The custom fields may contain any metadata for the attribute which can be used by the storefront application. i.e. A custom field may contain data useful for grouping custom attributes.</li></ul>When custom attributes are converted to an XML string and saved within the product object, some metadata fields of the custom attribute are saved along with the value of the attribute itself. These metadata fields (i.e. Message catalog key, the template for displaying the attribute and the custom fields) are stored in the XML for performance reasons. When a Product Attribute Descriptor is modified or deleted, all of the products using the descriptor are not updated automatically. A dialog box appears where you can choose whether to update the products. If the 'Yes' button is clicked, then the code loops through all products using the Product Attribute Descriptor and updates the XML. If there are many products, this process may take a while.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Custom Attributes per page</li></ul>
help.productOptions             = A list of product options is shown on the left side of the window. The available values for each option can be viewed by clicking the <b>+</b> symbol next to the option name. Each option or option value may be edited or deleted, by selecting it and clicking the appropriate button. The default number of options displayed, as well as the number of results displayed after a search, may be customized in the <b>Configuration>>AdminApp Configuration</b> section of the Admin App.<br /><br />An option may be of four different types.<ul><li>The <b>Standard</b> type is where each option value defines a product attribute which may or may not modify the price of the product (i.e. 'Small', 'Medium' and 'Large' for an option called 'Size').</li><li>The <b>Variable Quantity</b> type (Business or Enterprise Only) is an option whose value may take a customer defined quantity. For example if the option is 'Additional Memory' you may define one option value of 'GB' and in the storefront UI a data entry text box is displayed to the user (rather than a list of fixed option values) where the user may enter the number of Gigabytes of additional memory he requires. In this case the price defined when adding the option to a product, becomes the unit price and will be multiplied by the quantity entered by the customer in order to determine the final price of the option.</li><li>The <b>Customer Price</b> type (Business or Enterprise Only) allows the customer to enter a price for the option. This could be used for making donations where the customer can enter the donation amount.</li><li>The <b>Customer Text</b> type (Business or Enterprise Only) option allows a customer to enter text which could be used to personalize the product. For example the text could contain a name or initials to engrave the product with.</li></ul>Each product option and option value has a couple of  custom attributes and a code. It's important to set the code if you intend to load different images for the various option values (i.e. blue images for a blue shirt and green images for a green shirt) since the code is used to generate a unique image file name. Otherwise you may leave it empty.<br /><br />To create a new option, you must select the <b>root</b> node and then click the <b>New</b> button. To create a new option value, you must select the option, and then click the <b>New</b> button.
help.cacheConfig                = <b>Caching</b><br /><br />KonaKart is configured using the configuration variables present within this section of the Administration Application. The variables are stored within the <b>configuration</b> database table and may be edited from this panel.<br /><br />Changes may take a few seconds to become active because the application cache needs to be reloaded, and this happens on a scheduled basis at the frequency defined by the <b>Client config cache refresh check interval</b> configuration variable that can be edited on this panel.<br /><br />The <b>Admin caches refresh check interval</b> works in a similar way for the Admin caches.<br /><br />${help.returnByApi}<br /><br />In the Business and Enterprise Editions of KonaKart you can choose to <b>enable or disable the caching</b> of Products and/or Product Image names.<br /><br />You can set a maximum size for the KonaKart Product Cache (maximum number of products) - ensure you allocate enough memory to java.<br /><br />Cache Management (flushing etc) is controlled by KonaKart Events - you can choose whether or not to create some of these events.  If you choose to create an event (eg Quantity Change Events) this will cause the relevant product to be removed from the cache so that its Quantity is updated next time it is read.<br /><br />See the User Guide for more details on how to configure caching in KonaKart.<br /><br />Most variables have float over text with a short description of their functionality.
help.pdfConfig                  = <b>PDF Configuration</b><br /><br />These are the configuration parameters for PDF document creation in your store. <br /><br />These are only used in the Business or Enterprise Editions of KonaKart.<br /><br />You can define the <b>PDF Directory</b> path where PDF files will be created.  <br /><br />In the case of the Invoices, when KonaKart creates these it stores only the part of the file name after the base path so that the full file name can be generated by concatenating the base path configuration value with the storeId (or "store1" in single-store mode) and the invoice file name attribute on the order object.  This allows you to move the generated documents to a new home just so long as you re-configure the base path configuration value.<br /><br />${help.returnByApi}
help.products                   = You may search for products using a combination of various filters:<br /><ul><li>Products containing some text</li><li>Products by SKU</li><li>Products within a category</li><li>Products of a manufacturer</li><li>Products of a certain type</li><li>Products coming soon</li><li>Products on special offer</li></ul>Wildcard configuration parameters control the precise searches of substrings (See <b>Configuration >> Admin App Configuration</b>) but with the default settings a wildcard is added before and after all search text which means that all <b>Apples</b> will be returned if you enter <b>ple</b> as the search string.<br /><br />To search by ID you must check the ID check box and enter the numeric product ID in the text field above the search button. To search by SKU, you must check the SKU check box and enter the SKU in the text field above the search button. If no check box is checked, the search is done on the product name. The description is included if the Search Desc. box is checked. By default the search is not case sensitive if you are using MySQL or MS-SQLServer and case sensitive if you are using PostgreSQL, Oracle or DB2. You can configure your database to be non-case sensitive (refer to the User Guide for details on how to modify the case-sensitivity).  Once the search criteria have been set, you must click the search button.<br /><br />Any displayed product may be edited or deleted by clicking the respective buttons at the bottom of the list. Click the <b>New</b> button to create a product.<br /><br />If you've defined one or more product catalogs, a <b>Remove From Cat</b> button will be visible. The functionality associated with this button is to remove all catalog prices and quantities defined for the selected product and selected catalog.<br /><br />The product id and sku (if set) can be viewed by moving the mouse over the product name in the array of products.<br /><br />Using <b>File based configuration</b> you can configure the panel to display the product SKU instead of the product name (fbc.kk_panel_products.hide_name_show_sku). In this case the mouse float-over displays the product id and the product name.  File based configuration can also be used to define the number of products shown in each group returned from the database and to set case-insensitive searching for case-sensitive databases.<br /><br /> By default, the quantity displayed is the quantity of the base product. When a product has attributes such as color or size (has many variants), the quantity number displayed is preceded by an asterisk and if you move your mouse over it, a float over appears, displaying the quantity for all variants.<br /><br />Using File based configuration (fbc.kk_panel_products.qty_to_show) you can configure what quantity number is displayed. You can choose between the following options:<ul><li> Show quantity of base product (default)</li><li> Show quantity of variant with lowest value</li><li> Show quantity of default variant based on sort order of product attributes</li><li> Show quantity of variant with highest value</li></ul>Sort by quantity only works on the quantity of the base product, so if you decide to display the quantity of a variant, the sort will give strange results. In order to avoid this, the sort can be disabled using File based configuration (fbc.kk_panel_products.allow_qty_sort).<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Products per page</li></ul>
help.returns                    = An order may have multiple returns (i.e. The products within the order may be returned at different times). The return must contain a Return Merchandise Authorization code (RMA) and may contain text explaining the reason for the return. Each return contains a number of returned products whose quantity cannot exceed the total number of products within the order.<br /><br /><b>Searching and Editing</b><br />Returns may be searched for by the id of the order, the Order Number or by the RMA. You must enter the search constraints and then click the <b>Search</b> button. This will retrieve all return objects matching the search criteria. In most cases there will only be one return per order. When you click on a row containing a return, the details of the return will be displayed. The details include the Order Id, Order Number, the RMA Code and the Return Reason. Below these details, you will see a list of products that the order contained. Each product can be identified by its product Id and / or its SKU. You may modify the number of products returned by entering a number that cannot be greater than the quantity within the original order. Clicking the <b>Save</b> button will save the modification.<br /><br /><b>Inserting</b><br />To insert a new return, you must click the <b>New</b> button and enter an Order Id and an RMA Code. The Order Number is optional. When you tab out of the Order Id field after having entered the id of an existing order, a list of products will appear, all with return quantity set to 0. You may change these quantity fields to match the actual products that have been returned and then click the <b>Save</b> button to save the return. If your orders have an Order Number, you may enter that instead of the Order Id, and when tabbing out of the Order Number field the product list appears in the same way as just described. When this window is opened from the Orders window after having selected an order, the Order Id and Order Number fields are automatically populated with data from the selected order.<br /><br />In the Business or Enterprise Editions of KonaKart you will notice that each product line in the list of products contains a Unit Price and a Points text box where you may enter the number of points and the amount that needs to be refunded when a single product is returned. The Unit Price default value is set when the order is created by the manageReturnValues(OrderIf order) method in the OrderIntegrationMgr. The logic for setting the Unit Price may be modified by editing this method. The default value for the points is set by the points promotion module when the points are allocated. Note that the initial Unit Price for refunds (set when the order is created) needs to be modified by any promotion module that applies a discount so that the correct value is saved in the database. <br /><br />Konakartadmin_gwt.properties contains a couple of configuration variables that may be used to modify what is displayed in the array by hiding the point and / or model columns.<ul><li>#fbc.kk_panel_returns.hide_points                           = true</li><li>#fbc.kk_panel_returns.hide_model                            = true</li></ul> <br /><br />The <b>AdminOrderIntegrationMgr</b> contains a <b>getRMACode()</b> method which automatically generates an RMA code based on the order id that is used to populate the entry field. This method may be modified to add your own custom algorithm. In order to force manual entry of the RMA Code, the method must return null.<br /><br />A custom button with a label such as <b>Credit</b> may appear if it has been defined by the administrator and you are authorized to use it.   This button will have functionality specific to your particular store (please ask your KonaKart administrator for details).<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Returned Products per page</li></ul>
