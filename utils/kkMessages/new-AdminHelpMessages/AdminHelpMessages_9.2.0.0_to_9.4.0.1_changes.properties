# Messages changed between 9.2.0.0 to 9.4.0.1
#-------------------------------------------------------------

help.customerTags      = This panel is used to create, edit and delete customer tags. A customer tag can be associated with a customer and given a value for that customer. The tags are used for marketing purposes, to show dynamic content, to determine whether to activate a promotion and to filter the recipients of customer mailings. Expressions can be created using the tags, that can be evaluated in real time to display dynamic content. i.e. Show a banner or activate a promotion only to customers over 50 years old that have viewed products in a particular category. Tags may also be used in a B2B scenario to hold information about a customer such as whether the customer has an order limit or whether the customer can view orders of other customers that have been defined in the customer hierarchy tree. <br/><br/> The <b>tag type</b> can take the following values:<ul><li>STRING_TYPE - The tag value is in the format of a String. i.e. To store the country from which the store is being accessed.</li><li>INT_TYPE - The tag type is in the format of an int. i.e. To save the product id of  the last product viewed by the customer. </li><li>MULTI_INT_TYPE - The tag type allows the tag to store an array of ints. When this type is selected, the <b>Max Number of Ints</b> attribute determines the maximum number of ints in the array. i.e. To store the ids of the last 5 products viewed by the customer.</li><li>DECIMAL_TYPE - The tag type is in the format of a decimal. i.e. To store the value of all items in the basket.</li><li>DATE_TYPE - The tag type is in the format of a date. In an expression it can be used to compare the stored date with another chosen date.</li><li>BOOLEAN_TYPE - The tag type is in the format of a boolean. i.e. To store the customer gender. The tag could be named IS_MALE and take values of true or false.</li><li>AGE_TYPE - The tag type is used to store dates. Unlike the DATE_TYPE which can compare dates, this tag is used when in an expression you want to act on the  elapsed time (or age) of an event. i.e. To store the date of the last login for the customer so you can take action if a customer hasn't logged in for two weeks. Alternatively you could store the age of a customer to offer promotions to certain age brackets.</li></ul>The <b>name</b> of the tag is important because it will be used to identify the tag when being set for a customer. The <b>description</b> of the tag is used in the expression builder when building an expression using the tag. i.e. A tag may be named LAST_PRODUCT_VIEWED and have a description, "last product viewed".<br/><br/>The <b>validation</b> attribute is optional and may contain regular expression to validate values entered in the expression builder. i.e. For a boolean tag it should be set to true|false.<br/><br/>The <b>weighting</b> attribute is optional but can be used in the calculation of suggested products if the external AI engine is not available.<br/><br/>The <b>Set by API</b> check box allows you to determine whether the customer tag value can be set using the application API (e.g. KKEngIf). It should be set for tags that capture customer behaviour such as CART_TOTAL but shouldn't be set for any of the B2B tags which grant permissions for customers. The default value during an insert is false. It can be set to true in konakartadmin_gwt.properties using the property fbc.kk_panel_customer_tags.set_by_api.<br/><br/>The <b>Used in Expressions</b> check box allows you to determine whether the customer tag should appear in the drop list when choosing a tag in the expression builder.<br/><br/>The custom fields can be used to store custom data for the tag. The labels for the custom fields can be changed in the message catalog.help.customPanel1               = Help text for custom panel 1. Substitute this with your own text in the file AdminHelpMessages.properties.<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Customer Tags per page</li></ul>
help.solrControl       = You can use this panel to add all products in the catalog to the Solr search engine and to remove all products indexed by the Solr search engine.<br /><br />Solr should already be running and be available at the URL which can be configured under <b>Configuration >> Solr Search Engine</b>.<br /><br />Since the add / remove requests could take some time to complete, the processes run asynchronously and control is immediately restored to the Admin App. In order to track progress, you may use the Solr Admin App which will show many statistics of the Solr Server. If for some reason an exception occurs, you will be able to read details in the Solr log.<br /><br />For the Add request there are configuration parameters in konakartadmin.properties that can be modified to maximise performance based on the available resources.<ul><li>konakart.solr.num.threads - Maximum number of executor threads working in parallel sending products to Solr</li><li>konakart.solr.product.block.size - Number of products read from the relational database in a single read operation and fed to each thread</li><li>konakart.solr.shutdown.wait.secs - Number of seconds to wait for executor threads to end for a graceful shutdown</li></ul>If com.konakartadmin logging is set to INFO, the log provides some useful information that can be used to decide how many threads to use depending on whether the bottleneck is reading the products from the relational database or sending them to Solr.
help.editProductsDetails_2 = <li><b>Calc Weight</b> sets the Weight field of the bundle product by adding the weights of the products in the bundle. The calculated weight can be overridden at any time and is not saved in the database until the Save button is clicked.</li></ul>A <b>Unit of Measure</b> can be defined both for weight and size. Also, the net weight or volume may be defined in order to easily calculate the price per unit where the unit of measure may also be defined. For example in order to be able to calculate the price per kg of a product for all of its prices, we would set the <b>Net Weight or Volume Unit of Measure</b> to be kg . If the net product weight is 250g, then in this case the <b>Net Weight or Volume</b> would be set to 0.25 to calculate the price / kg by dividing the price by the net weight. <br /><br />The <b>Product Id</b> can be made invisible / visible by setting the configuration variable under <b>Configuration >> Admin App Configuration</b>.
help.bookings          = A bookable product is a product with a start and end date such as a course. When a customer buys a bookable product through the storefront application, a booking is made and associated with the bookable product. (i.e. the customer signs up for the course). The booking is also associated with the order and the customer. Depending on where it was opened from, this panel shows the bookings for a product, a customer or an order. <br /><br />The editable fields are the customer name and the custom fields. The quantity of the booking is read-only. Other fields are for informational purpose only and aren't editable since they do not belong to the booking. They are the start and end dates of the bookable product, the name of the bookable product and the id of the order.<br /><br />By default, when a booking is deleted, a hard delete is performed which erases the booking information from the database. By setting <b>fbc.bookings.soft.delete = true</b> in konakartadmin_gwt.properties, the Admin App is configured to perform a soft delete which just flags the booking information as deleted, without actually erasing it from the database. This mode may be useful for auditing purposes or just for when you want to keep track of the number of cancellations for an event.
help.returns           = An order may have multiple returns (i.e. The products within the order may be returned at different times). The return must contain a Return Merchandise Authorization code (RMA) and may contain text explaining the reason for the return. Each return contains a number of returned products whose quantity cannot exceed the total number of products within the order.<br /><br /><b>Searching and Editing</b><br />Returns may be searched for by the id of the order, the Order Number or by the RMA. You must enter the search constraints and then click the <b>Search</b> button. This will retrieve all return objects matching the search criteria. In most cases there will only be one return per order. When you click on a row containing a return, the details of the return will be displayed. The details include the Order Id, Order Number, the RMA Code and the Return Reason. Below these details, you will see a list of products that the order contained. Each product can be identified by its product Id and / or its SKU. You may modify the number of products returned by entering a number that cannot be greater than the quantity within the original order. Clicking the <b>Save</b> button will save the modification.<br /><br /><b>Inserting</b><br />To insert a new return, you must click the <b>New</b> button and enter an Order Id and an RMA Code. The Order Number is optional. When you tab out of the Order Id field after having entered the id of an existing order, a list of products will appear, all with return quantity set to 0. You may change these quantity fields to match the actual products that have been returned and then click the <b>Save</b> button to save the return. If your orders have an Order Number, you may enter that instead of the Order Id, and when tabbing out of the Order Number field the product list appears in the same way as just described. When this window is opened from the Orders window after having selected an order, the Order Id and Order Number fields are automatically populated with data from the selected order.<br /><br />In the Business or Enterprise Editions of KonaKart you will notice that each product line in the list of products contains a Unit Price and a Points text box where you may enter the number of points and the amount that needs to be refunded when a single product is returned. The Unit Price default value is set when the order is created by the manageReturnValues(OrderIf order) method in the OrderIntegrationMgr. The logic for setting the Unit Price may be modified by editing this method. The default value for the points is set by the points promotion module when the points are allocated. Note that the initial Unit Price for refunds (set when the order is created) needs to be modified by any promotion module that applies a discount so that the correct value is saved in the database. <br /><br />Konakartadmin_gwt.properties contains a couple of configuration variables that may be used to modify what is displayed in the array by hiding the point and / or model columns.<ul><li>#fbc.kk_panel_returns.hide_points                           = true</li><li>#fbc.kk_panel_returns.hide_model                            = true</li></ul>If the custom attributes are not being used, you may hide them using the following configuration variables:<ul><li>#fbc.kk_panel_returns.hide_custom_line1                           = true</li><li>#fbc.kk_panel_returns.hide_custom_line2                            = true</li><li>#fbc.kk_panel_returns.hide_custom_line3                            = true</li></ul>The <b>AdminOrderIntegrationMgr</b> contains a <b>getRMACode()</b> method which automatically generates an RMA code based on the order id that is used to populate the entry field. This method may be modified to add your own custom algorithm. In order to force manual entry of the RMA Code, the method must return null.<br /><br />A custom button with a label such as <b>Credit</b> may appear if it has been defined by the administrator and you are authorized to use it.   This button will have functionality specific to your particular store (please ask your KonaKart administrator for details).<br /><br />Click the <b>Settings</b> icon to set the following:<br /><ul><li>Returned Products per page</li></ul>
